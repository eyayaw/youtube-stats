---
title: |
  YouTube Channel Statistics: [Ethio 360 Media](https://youtube.com/channel/UCvr6jA3WYOhXFUD2LKpqhQw)
author: Eyayaw
date: today
date-format: long
format:
  html:
    theme:
     light: flatly
     dark : darkly
execute:
  warning: false
  message: false
code-fold: true
code-line-numbers: true
code-link: true
code-tools: true
highlight-style: solarized
link-external-icon: true
link-external-newwindow: true
---

```{r}
#| label: set up
library(data.table)
library(stringi)
library(ggplot2)
library(patchwork)
library(ggtext)
library(showtext)

# plot options
theme_set(theme_minimal())
fig_width = 16
fig_height = 8

font_add("abyssinica sil", "AbyssinicaSIL-Regular.ttf")
font_add("helvetica", "Helvetica.ttc")

showtext_opts(dpi=320)
showtext_auto()
caption_text = "Author: <span style = 'color:#0090e8;'>twitter.com/eyayaw</span><br>Data: accessed via <span style = 'color:red;'>YouTube Data API v3</span>"
```

## Channel info

```{r}
#| label: channel info
access_time = "2022-12-16 02:03:42 CET" # data access time
ch_title = "Ethio-360-Media" # channel title (sep by -)

channel_info = jsonlite::fromJSON(
  sprintf("%s/channel-info_%s_%s.json", ch_title, ch_title, access_time),
  flatten = TRUE
)
```

-   **Channel title**:
    `r channel_info$snippet$title`![](Ethio-360-Media/channel-logo_Ethio-360-Media.jpg){width="4.7mm"
    height="5mm"}
-   **Channel statistics**:
    -   Views:
        `r prettyNum(channel_info$statistics$viewCount, big.mark=",")`
    -   Subscribers:
        `r prettyNum(channel_info$statistics$subscriberCount, big.mark=",")`
    -   Videos uploaded:
        `r prettyNum(channel_info$statistics$videoCount, big.mark=",")`

```{r}
#| label: import channel data
channel_data = fread(
  sprintf("%s/channel-data_%s_%s.csv", ch_title, ch_title, access_time),
  na.strings = "NaN", encoding = "UTF-8"
)

# rename var names
setnames(
  channel_data,
  gsub("((snippet)|(statistics)|(contentDetails))[.]", "", names(channel_data))
)
```

```{r}
#| label: cleaning

# cleaning

## contentDetails.duration: the length of the video (in ISO 8601 duration)
## format: PT#H#M#S, H, M, and S (all integers) specify the length of the video in hours, minutes, and seconds
dur_patt = c(hour = "([0-9]+)(?=H)", minute = "([0-9]{1,2})(?=M)", second = "([0-9]{1,2})(?=S)")
channel_data[, hour := as.integer(stri_extract(duration, regex = dur_patt["hour"]))
             ][, minute := as.integer(stri_extract(duration, regex = dur_patt["minute"]))
               ][, second := as.integer(stri_extract(duration, regex = dur_patt["second"]))]
# duration in seconds
channel_data[, duration_second := as.integer(rowSums(cbind(hour * 3600, minute * 60, second), na.rm = TRUE))
             ][, duration_minute := round(duration_second / 60, 2)]

# make short title by removing unnecessary info in the title
programs = c("zare m(i|e)n ale", "se?pecial programm?", "(daily )?news", "poleti[kc]achin")
patt = paste(paste0(programs[-3], "[\\p{Z}\\p{S}]*"), collapse = "|")
patt_date = r"{(?<day>\p{Lu}\p{Ll}+[ ,-]*)?(?<mon>\p{Lu}\p{Ll}+[ ,]*)?(?<date>\d{1,2}[ ,\']*)?(?<year>\d{4})$}"
channel_data[, stitle := sub("^[Ee]thio ?360( Media)?", "", title)
             ][, stitle := gsub(patt, "", stitle, ignore.case = TRUE, perl = TRUE)
               ][, stitle := sub(patt_date, "", stitle, perl = TRUE)
                 # remove quotes anywhere, and spaces around puncts if at the end.
                ][, stitle := gsub("['\"]", "", stitle) |>
                    stri_replace_all_regex(" *([:punct:]+) *$", "$1") |>
                    stri_trim_both()]


# parse program type
channel_data[, prog := stri_extract(
  title, regex = paste(programs, collapse = "|"), case_insensitive = TRUE
  )
  ][, prog := fcase(
  prog %ilike% programs[1], "Zare Min Ale",
  prog %ilike% programs[2], "Special Program",
  prog %ilike% programs[3], "News",
  prog %ilike% programs[4], "Poletikachin",
  rep(TRUE, length(prog)), "Unknown"
)]
setcolorder(channel_data, c("stitle", "prog"), after = "title")


# full video url
# channel_data[, videoLink := sprintf("[%s](https://youtu.be/%s)", videoId, videoId)]
channel_data[, videoLink := sprintf("<a href=\"https://youtu.be/%s\">%s</a>", videoId, videoId)]
```

## Most popular videos by number of views, likes, comments, and duration

```{r}
#| fig-width: 16
#| fig-height: 8
#| cache: false
source("chart.R")
```

## Length of videos

```{r}
channel_data |>
  subset(duration_minute > 0) |>
  ggplot() +
  geom_histogram(aes(duration_minute, fill = prog), bins = 30, color = "gray90") +
  facet_wrap(~prog, scales = "free") +
  labs(
    x = "Video duration (minutes)",
    title = "Histogram: Video length (in minutes) by program type*",
    caption = "*Program type is parsed from the video description."
  ) +
  theme(legend.position = "none") -> p

wrap_plots(p, ggplot() +
  geom_textbox(aes(x, y, label="Haha"), data.frame(x=5, y=5)) +
  theme_void())
```

## Most and least viewed videos

```{r}
#| label: top 10 videos

top_10_vids = top_10_long[stat_name == "viewCount", ] |>
  DT(, .(videoLink, videoPublishedAt, title, duration, viewCount = count))

bottom_10_vids = ch_data_long[stat_name == "viewCount", ] |>
  subset(count > 0) |> # videos with no views might be rescheduled live streams
  DT(order(count), ) |>
  DT(1:10, .(videoLink, videoPublishedAt, title, duration, viewCount = count))
```

```{r}
#| label: table
#| results: asis

knitr::kable(
  top_10_vids[, .(videoLink, title, videoPublishedAt, viewCount)],
  booktabs = TRUE, escape = FALSE,
  caption = "10 Most viewed videos"
) |>
  kableExtra::kable_styling(
    font_size = 8, bootstrap_options = c("striped", "hover", "condensed")
    )


knitr::kable(
  bottom_10_vids[, .(videoLink, title, videoPublishedAt, viewCount)],
  booktabs = TRUE, escape = FALSE,
  caption = "10 Least viewed videos"
) |>
  kableExtra::kable_styling(font_size = 8, bootstrap_options = c("striped", "hover", "condensed"))
```